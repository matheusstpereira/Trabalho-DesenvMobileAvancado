{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"route\", \"style\", \"children\", \"borderless\", \"centered\", \"rippleColor\"],\n  _excluded2 = [\"component\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from \"../styles/overlay\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Badge from \"./Badge\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport Text from \"./Typography/Text\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nimport useAnimatedValue from \"../utils/useAnimatedValue\";\nimport useAnimatedValueArray from \"../utils/useAnimatedValueArray\";\nimport useLayout from \"../utils/useLayout\";\nvar MIN_RIPPLE_SCALE = 0.001;\n\nvar MIN_TAB_WIDTH = 96;\nvar MAX_TAB_WIDTH = 168;\nvar BAR_HEIGHT = 56;\nvar BOTTOM_INSET = getBottomSpace();\nvar FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\nvar Touchable = function Touchable(_ref) {\n  var _0 = _ref.route,\n    style = _ref.style,\n    children = _ref.children,\n    borderless = _ref.borderless,\n    centered = _ref.centered,\n    rippleColor = _ref.rippleColor,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  return TouchableRipple.supported ? React.createElement(TouchableRipple, _extends({}, rest, {\n    disabled: rest.disabled || undefined,\n    borderless: borderless,\n    centered: centered,\n    rippleColor: rippleColor,\n    style: style\n  }), children) : React.createElement(TouchableWithoutFeedback, rest, React.createElement(View, {\n    style: style\n  }, children));\n};\nvar SceneComponent = React.memo(function (_ref2) {\n  var component = _ref2.component,\n    rest = _objectWithoutProperties(_ref2, _excluded2);\n  return React.createElement(component, rest);\n});\n\nvar BottomNavigation = function BottomNavigation(_ref3) {\n  var navigationState = _ref3.navigationState,\n    renderScene = _ref3.renderScene,\n    renderIcon = _ref3.renderIcon,\n    renderLabel = _ref3.renderLabel,\n    _ref3$renderTouchable = _ref3.renderTouchable,\n    renderTouchable = _ref3$renderTouchable === void 0 ? function (props) {\n      return React.createElement(Touchable, props);\n    } : _ref3$renderTouchable,\n    _ref3$getLabelText = _ref3.getLabelText,\n    getLabelText = _ref3$getLabelText === void 0 ? function (_ref4) {\n      var route = _ref4.route;\n      return route.title;\n    } : _ref3$getLabelText,\n    _ref3$getBadge = _ref3.getBadge,\n    getBadge = _ref3$getBadge === void 0 ? function (_ref5) {\n      var route = _ref5.route;\n      return route.badge;\n    } : _ref3$getBadge,\n    _ref3$getColor = _ref3.getColor,\n    getColor = _ref3$getColor === void 0 ? function (_ref6) {\n      var route = _ref6.route;\n      return route.color;\n    } : _ref3$getColor,\n    _ref3$getAccessibilit = _ref3.getAccessibilityLabel,\n    getAccessibilityLabel = _ref3$getAccessibilit === void 0 ? function (_ref7) {\n      var route = _ref7.route;\n      return route.accessibilityLabel;\n    } : _ref3$getAccessibilit,\n    _ref3$getTestID = _ref3.getTestID,\n    getTestID = _ref3$getTestID === void 0 ? function (_ref8) {\n      var route = _ref8.route;\n      return route.testID;\n    } : _ref3$getTestID,\n    activeColor = _ref3.activeColor,\n    inactiveColor = _ref3.inactiveColor,\n    _ref3$keyboardHidesNa = _ref3.keyboardHidesNavigationBar,\n    keyboardHidesNavigationBar = _ref3$keyboardHidesNa === void 0 ? true : _ref3$keyboardHidesNa,\n    barStyle = _ref3.barStyle,\n    _ref3$labeled = _ref3.labeled,\n    labeled = _ref3$labeled === void 0 ? true : _ref3$labeled,\n    style = _ref3.style,\n    theme = _ref3.theme,\n    _ref3$sceneAnimationE = _ref3.sceneAnimationEnabled,\n    sceneAnimationEnabled = _ref3$sceneAnimationE === void 0 ? false : _ref3$sceneAnimationE,\n    onTabPress = _ref3.onTabPress,\n    onIndexChange = _ref3.onIndexChange,\n    _ref3$shifting = _ref3.shifting,\n    shifting = _ref3$shifting === void 0 ? navigationState.routes.length > 3 : _ref3$shifting,\n    safeAreaInsets = _ref3.safeAreaInsets;\n  var _safeAreaInsets$left, _safeAreaInsets$right, _safeAreaInsets$botto;\n  var scale = theme.animation.scale;\n  var focusedKey = navigationState.routes[navigationState.index].key;\n\n  var visibleAnim = useAnimatedValue(1);\n\n  var tabsAnims = useAnimatedValueArray(navigationState.routes.map(\n  function (_, i) {\n    return i === navigationState.index ? 1 : 0;\n  }));\n\n  var offsetsAnims = useAnimatedValueArray(navigationState.routes.map(\n  function (_, i) {\n    return i === navigationState.index ? 0 : 1;\n  }));\n\n  var indexAnim = useAnimatedValue(navigationState.index);\n\n  var rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  var _useLayout = useLayout(),\n    _useLayout2 = _slicedToArray(_useLayout, 2),\n    layout = _useLayout2[0],\n    onLayout = _useLayout2[1];\n\n  var _React$useState = React.useState([focusedKey]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedKey)) {\n    setLoaded(function (loaded) {\n      return [].concat(_toConsumableArray(loaded), [focusedKey]);\n    });\n  }\n\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    keyboardVisible = _React$useState4[0],\n    setKeyboardVisible = _React$useState4[1];\n  var handleKeyboardShow = React.useCallback(function () {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [scale, visibleAnim]);\n  var handleKeyboardHide = React.useCallback(function () {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true\n    }).start(function () {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n  var animateToIndex = React.useCallback(function (index) {\n    rippleAnim.setValue(MIN_RIPPLE_SCALE);\n    Animated.parallel([Animated.timing(rippleAnim, {\n      toValue: 1,\n      duration: shifting ? 400 * scale : 0,\n      useNativeDriver: true\n    })].concat(_toConsumableArray(navigationState.routes.map(function (_, i) {\n      return Animated.timing(tabsAnims[i], {\n        toValue: i === index ? 1 : 0,\n        duration: shifting ? 150 * scale : 0,\n        useNativeDriver: true\n      });\n    })))).start(function (_ref9) {\n      var finished = _ref9.finished;\n      tabsAnims.map(function (tab, i) {\n        return tab.setValue(i === index ? 1 : 0);\n      });\n\n      indexAnim.setValue(index);\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n      if (finished) {\n        offsetsAnims.forEach(function (offset, i) {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  }, [indexAnim, shifting, navigationState.routes, offsetsAnims, rippleAnim, scale, tabsAnims]);\n  React.useEffect(function () {\n    animateToIndex(navigationState.index);\n  }, []);\n  React.useEffect(function () {\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n    return function () {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, [handleKeyboardHide, handleKeyboardShow]);\n  var prevNavigationState = React.useRef();\n  React.useEffect(function () {\n    offsetsAnims.forEach(function (offset, i) {\n      var _prevNavigationState$;\n      if (i === navigationState.index || i === ((_prevNavigationState$ = prevNavigationState.current) === null || _prevNavigationState$ === void 0 ? void 0 : _prevNavigationState$.index)) {\n        offset.setValue(0);\n      }\n    });\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n  var handleTabPress = function handleTabPress(index) {\n    var event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: function preventDefault() {\n        event.defaultPrevented = true;\n      }\n    };\n    onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n  var jumpTo = React.useCallback(function (key) {\n    var index = navigationState.routes.findIndex(function (route) {\n      return route.key === key;\n    });\n    onIndexChange(index);\n  }, [navigationState.routes, onIndexChange]);\n  var routes = navigationState.routes;\n  var colors = theme.colors,\n    isDarkTheme = theme.dark,\n    mode = theme.mode;\n  var _ref10 = StyleSheet.flatten(barStyle) || {},\n    customBackground = _ref10.backgroundColor,\n    _ref10$elevation = _ref10.elevation,\n    elevation = _ref10$elevation === void 0 ? 4 : _ref10$elevation;\n  var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n  var backgroundColor = shifting ? indexAnim.interpolate({\n    inputRange: routes.map(function (_, i) {\n      return i;\n    }),\n    outputRange: routes.map(function (route) {\n      return getColor({\n        route: route\n      }) || approxBackgroundColor;\n    })\n  }) : approxBackgroundColor;\n  var isDark = typeof approxBackgroundColor === 'string' ? !color(approxBackgroundColor).isLight() : true;\n  var textColor = isDark ? white : black;\n  var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n  var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n  var touchColor = color(activeColor || activeTintColor).alpha(0.12).rgb().string();\n  var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  var maxTabBarWidth = maxTabWidth * routes.length;\n  var tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  var tabWidth = tabBarWidth / routes.length;\n  var rippleSize = layout.width / 4;\n  var insets = {\n    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : 0,\n    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : 0,\n    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : BOTTOM_INSET\n  };\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(View, {\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }]\n  }, routes.map(function (route, index) {\n    if (!loaded.includes(route.key)) {\n      return null;\n    }\n    var focused = navigationState.index === index;\n    var opacity = sceneAnimationEnabled ? tabsAnims[index] : focused ? 1 : 0;\n    var top = sceneAnimationEnabled ? offsetsAnims[index].interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, FAR_FAR_AWAY]\n    }) : focused ? 0 : FAR_FAR_AWAY;\n    return React.createElement(Animated.View, {\n      key: route.key,\n      pointerEvents: focused ? 'auto' : 'none',\n      accessibilityElementsHidden: !focused,\n      importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n      style: [StyleSheet.absoluteFill, {\n        opacity: opacity\n      }],\n      collapsable: false,\n      removeClippedSubviews:\n      Platform.OS === 'ios' ? navigationState.index !== index : true\n    }, React.createElement(Animated.View, {\n      style: [styles.content, {\n        top: top\n      }]\n    }, renderScene({\n      route: route,\n      jumpTo: jumpTo\n    })));\n  })), React.createElement(Surface, {\n    style: [styles.bar, keyboardHidesNavigationBar ? {\n      transform: [{\n        translateY: visibleAnim.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height, 0]\n        })\n      }],\n      position: keyboardVisible ? 'absolute' : null\n    } : null, barStyle],\n    pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboardVisible ? 'none' : 'auto' : 'none',\n    onLayout: onLayout\n  }, React.createElement(Animated.View, {\n    style: [styles.barContent, {\n      backgroundColor: backgroundColor\n    }]\n  }, React.createElement(View, {\n    style: [styles.items, {\n      marginBottom: insets.bottom,\n      marginHorizontal: Math.max(insets.left, insets.right),\n      maxWidth: maxTabBarWidth\n    }],\n    accessibilityRole: 'tablist'\n  }, shifting ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.ripple, {\n      top: (BAR_HEIGHT - rippleSize) / 2,\n      left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n      height: rippleSize,\n      width: rippleSize,\n      borderRadius: rippleSize / 2,\n      backgroundColor: getColor({\n        route: routes[navigationState.index]\n      }),\n      transform: [{\n        scale: rippleAnim.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 8]\n        })\n      }],\n      opacity: rippleAnim.interpolate({\n        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n        outputRange: [0, 0, 1, 1]\n      })\n    }]\n  }) : null, routes.map(function (route, index) {\n    var focused = navigationState.index === index;\n    var active = tabsAnims[index];\n\n    var scale = labeled && shifting ? active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.5, 1]\n    }) : 1;\n\n    var translateY = labeled ? shifting ? active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [7, 0]\n    }) : 0 : 7;\n\n    var activeOpacity = active;\n    var inactiveOpacity = active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [1, 0]\n    });\n    var badge = getBadge({\n      route: route\n    });\n    return renderTouchable({\n      key: route.key,\n      route: route,\n      borderless: true,\n      centered: true,\n      rippleColor: touchColor,\n      onPress: function onPress() {\n        return handleTabPress(index);\n      },\n      testID: getTestID({\n        route: route\n      }),\n      accessibilityLabel: getAccessibilityLabel({\n        route: route\n      }),\n      accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n      accessibilityComponentType: 'button',\n      accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n      accessibilityState: {\n        selected: focused\n      },\n      style: styles.item,\n      children: React.createElement(View, {\n        pointerEvents: \"none\"\n      }, React.createElement(Animated.View, {\n        style: [styles.iconContainer, {\n          transform: [{\n            translateY: translateY\n          }]\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.iconWrapper, {\n          opacity: activeOpacity\n        }]\n      }, renderIcon ? renderIcon({\n        route: route,\n        focused: true,\n        color: activeTintColor\n      }) : React.createElement(Icon, {\n        source: route.icon,\n        color: activeTintColor,\n        size: 24\n      })), React.createElement(Animated.View, {\n        style: [styles.iconWrapper, {\n          opacity: inactiveOpacity\n        }]\n      }, renderIcon ? renderIcon({\n        route: route,\n        focused: false,\n        color: inactiveTintColor\n      }) : React.createElement(Icon, {\n        source: route.icon,\n        color: inactiveTintColor,\n        size: 24\n      })), React.createElement(View, {\n        style: [styles.badgeContainer, {\n          right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n        }]\n      }, typeof badge === 'boolean' ? React.createElement(Badge, {\n        visible: badge,\n        size: 8\n      }) : React.createElement(Badge, {\n        visible: badge != null,\n        size: 16\n      }, badge))), labeled ? React.createElement(Animated.View, {\n        style: [styles.labelContainer, {\n          transform: [{\n            scale: scale\n          }]\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.labelWrapper, {\n          opacity: activeOpacity\n        }]\n      }, renderLabel ? renderLabel({\n        route: route,\n        focused: true,\n        color: activeTintColor\n      }) : React.createElement(Text, {\n        style: [styles.label, {\n          color: activeTintColor\n        }]\n      }, getLabelText({\n        route: route\n      }))), shifting ? null : React.createElement(Animated.View, {\n        style: [styles.labelWrapper, {\n          opacity: inactiveOpacity\n        }]\n      }, renderLabel ? renderLabel({\n        route: route,\n        focused: false,\n        color: inactiveTintColor\n      }) : React.createElement(Text, {\n        selectable: false,\n        style: [styles.label, {\n          color: inactiveTintColor\n        }]\n      }, getLabelText({\n        route: route\n      })))) : React.createElement(View, {\n        style: styles.labelContainer\n      }))\n    });\n  })))));\n};\n\nBottomNavigation.SceneMap = function (scenes) {\n  return function (_ref11) {\n    var route = _ref11.route,\n      jumpTo = _ref11.jumpTo;\n    return React.createElement(SceneComponent, {\n      key: route.key,\n      component: scenes[route.key ? route.key : ''],\n      route: route,\n      jumpTo: jumpTo\n    });\n  };\n};\nexport default withTheme(BottomNavigation);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: _objectSpread({\n    flexDirection: 'row'\n  }, Platform.OS === 'web' ? {\n    width: '100%'\n  } : null),\n  item: {\n    flex: 1,\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center'\n  }),\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: _objectSpread({}, StyleSheet.absoluteFillObject),\n  label: _objectSpread({\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    whiteSpace: 'nowrap',\n    alignSelf: 'center'\n  } : null),\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","getBottomSpace","color","overlay","Icon","Surface","Badge","TouchableRipple","Text","black","white","withTheme","useAnimatedValue","useAnimatedValueArray","useLayout","MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","Platform","OS","Touchable","_0","route","style","children","borderless","centered","rippleColor","rest","supported","disabled","undefined","TouchableWithoutFeedback","View","SceneComponent","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","useState","loaded","setLoaded","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","Animated","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","Keyboard","addListener","removeListener","prevNavigationState","useRef","current","_prevNavigationState$","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","isDarkTheme","dark","mode","StyleSheet","flatten","customBackground","backgroundColor","elevation","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","pointerEvents","accessibilityElementsHidden","importantForAccessibility","absoluteFill","collapsable","removeClippedSubviews","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","accessibilityRole","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityState","selected","item","iconContainer","iconWrapper","source","icon","size","badgeContainer","String","visible","labelContainer","labelWrapper","label","selectable","SceneMap","scenes","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"sources":["BottomNavigation.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  Keyboard,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../styles/overlay';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Badge from './Badge';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Text from './Typography/Text';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../utils/useAnimatedValueArray';\nimport useLayout from '../utils/useLayout';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, [handleKeyboardHide, handleKeyboardShow]);\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <Animated.View\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </Animated.View>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}