{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport { ThemeProvider } from \"./theming\";\nimport { Provider as SettingsProvider } from \"./settings\";\nimport MaterialCommunityIcon from \"../components/MaterialCommunityIcon\";\nimport PortalHost from \"../components/Portal/PortalHost\";\nimport DefaultTheme from \"../styles/DefaultTheme\";\nimport DarkTheme from \"../styles/DarkTheme\";\nvar Provider = function Provider(_ref) {\n  var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));\n  var colorSchemeName = !props.theme && (Appearance === null || Appearance === void 0 ? void 0 : Appearance.getColorScheme()) || 'light';\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    reduceMotionEnabled = _React$useState2[0],\n    setReduceMotionEnabled = _React$useState2[1];\n  var _React$useState3 = React.useState(colorSchemeName),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    colorScheme = _React$useState4[0],\n    setColorScheme = _React$useState4[1];\n  var handleAppearanceChange = function handleAppearanceChange(preferences) {\n    var colorScheme = preferences.colorScheme;\n    setColorScheme(colorScheme);\n  };\n  React.useEffect(function () {\n    if (!props.theme) {\n      AccessibilityInfo.addEventListener('reduceMotionChanged', setReduceMotionEnabled);\n    }\n    return function () {\n      if (!props.theme) {\n        AccessibilityInfo.removeEventListener('reduceMotionChanged', setReduceMotionEnabled);\n      }\n    };\n  }, [props.theme]);\n  React.useEffect(function () {\n    if (!props.theme) Appearance === null || Appearance === void 0 ? void 0 : Appearance.addChangeListener(handleAppearanceChange);\n    return function () {\n      if (!props.theme) Appearance === null || Appearance === void 0 ? void 0 : Appearance.removeChangeListener(handleAppearanceChange);\n    };\n  }, [props.theme]);\n  var getTheme = function getTheme() {\n    var providedTheme = props.theme;\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      var theme = colorScheme === 'dark' ? DarkTheme : DefaultTheme;\n      return _objectSpread(_objectSpread({}, theme), {}, {\n        animation: _objectSpread(_objectSpread({}, theme.animation), {}, {\n          scale: reduceMotionEnabled ? 0 : 1\n        })\n      });\n    }\n  };\n  var children = props.children,\n    settings = props.settings;\n  return React.createElement(PortalHost, null, React.createElement(SettingsProvider, {\n    value: settings || {\n      icon: MaterialCommunityIcon\n    }\n  }, React.createElement(ThemeProvider, {\n    theme: getTheme()\n  }, children)));\n};\nexport default Provider;","map":{"version":3,"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAEA,SAASC,aAAT;AACA,SAASC,QAAQ,IAAIC,gBAArB;AACA,OAAOC,qBAAP;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP;AACA,OAAOC,SAAP;AAQA,IAAML,QAAQ,GAAG,SAAXA,QAAQ,OAA4B;EAAA,IAAnBM;EACrB,IAAMC,eAAe,GAClB,CAACD,KAAK,CAACE,KAAP,KAAgBC,UAAhB,aAAgBA,UAAhB,uBAAgBA,UAAU,CAAEC,cAAZ,EAAhB,CAAD,IAAkD,OADpD;EAGA,sBAAsDZ,KAAK,CAACa,QAAN,CACpD,KADoD,CAAtD;IAAA;IAAOC,mBAAD;IAAsBC,sBAAtB;EAGN,uBAAsCf,KAAK,CAACa,QAAN,CACpCJ,eADoC,CAAtC;IAAA;IAAOO,WAAD;IAAcC,cAAd;EAIN,IAAMC,sBAAsB,GAC1BC,SADID,sBAAsB,CAC1BC,WAD6B,EAE1B;IACH,IAAQH,cAAgBG,WAAxB,CAAQH;IACRC,cAAc,CAACD,WAAD,CAAd;EACD,CALD;EAOAhB,KAAK,CAACoB,SAAN,CAAgB,YAAM;IACpB,IAAI,CAACZ,KAAK,CAACE,KAAX,EAAkB;MAChBW,iBAAiB,CAACC,gBAAlB,CACE,qBADF,EAEEP,sBAFF;IAID;IACD,OAAO,YAAM;MACX,IAAI,CAACP,KAAK,CAACE,KAAX,EAAkB;QAChBW,iBAAiB,CAACE,mBAAlB,CACE,qBADF,EAEER,sBAFF;MAID;IACF,CAPD;EAQD,CAfD,EAeG,CAACP,KAAK,CAACE,KAAP,CAfH;EAiBAV,KAAK,CAACoB,SAAN,CAAgB,YAAM;IACpB,IAAI,CAACZ,KAAK,CAACE,KAAX,EAAkBC,UAAU,SAAV,cAAU,WAAV,sBAAU,CAAEa,iBAAZ,CAA8BN,sBAA9B;IAClB,OAAO,YAAM;MACX,IAAI,CAACV,KAAK,CAACE,KAAX,EACEC,UAAU,SAAV,cAAU,WAAV,sBAAU,CAAEc,oBAAZ,CAAiCP,sBAAjC;IACH,CAHD;EAID,CAND,EAMG,CAACV,KAAK,CAACE,KAAP,CANH;EAQA,IAAMgB,QAAQ,GAAG,SAAXA,QAAQ,GAAS;IACrB,IAAeC,gBAAkBnB,KAAjC,CAAQE,KAAK;IAEb,IAAIiB,aAAJ,EAAmB;MACjB,OAAOA,aAAP;IACD,CAFD,MAEO;MACL,IAAMjB,KAAK,GAAIM,WAAW,KAAK,MAAhB,GACXT,SADW,GAEXD,YAFJ;MAIA,uCACKI,KADE;QAELkB,SAAS,kCACJlB,KAAK,CAACkB,SADA;UAETC,KAAK,EAAEf,mBAAmB,GAAG,CAAH,GAAO;QAAA;MAFxB;IAKd;EACF,CAlBD;EAoBA,IAAQgB,QAAF,GAAyBtB,KAA/B,CAAQsB,QAAF;IAAYC,WAAavB,KAA/B,CAAkBuB;EAClB,OACE/B,oBAACK,UAAD,QACEL,oBAACG,gBAAD;IAAkB6B,KAAK,EAAED,QAAQ,IAAI;MAAEE,IAAI,EAAE7B;IAAR;EAArC,GACEJ,oBAACC,aAAD;IAAeS,KAAK,EAAEgB,QAAQ;EAA9B,GAAmCI,QAAnC,CADF,CADF,CADF;AAOD,CAvED;AAyEA,eAAe5B,QAAf","names":["React","ThemeProvider","Provider","SettingsProvider","MaterialCommunityIcon","PortalHost","DefaultTheme","DarkTheme","props","colorSchemeName","theme","Appearance","getColorScheme","useState","reduceMotionEnabled","setReduceMotionEnabled","colorScheme","setColorScheme","handleAppearanceChange","preferences","useEffect","AccessibilityInfo","addEventListener","removeEventListener","addChangeListener","removeChangeListener","getTheme","providedTheme","animation","scale","children","settings","value","icon"],"sources":["Provider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { AccessibilityInfo, Appearance, ColorSchemeName } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\nconst Provider = ({ ...props }: Props) => {\n  const colorSchemeName =\n    (!props.theme && Appearance?.getColorScheme()) || 'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState<boolean>(\n    false\n  );\n  const [colorScheme, setColorScheme] = React.useState<ColorSchemeName>(\n    colorSchemeName\n  );\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    if (!props.theme) {\n      AccessibilityInfo.addEventListener(\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        AccessibilityInfo.removeEventListener(\n          'reduceMotionChanged',\n          setReduceMotionEnabled\n        );\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    if (!props.theme) Appearance?.addChangeListener(handleAppearanceChange);\n    return () => {\n      if (!props.theme)\n        Appearance?.removeChangeListener(handleAppearanceChange);\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const { theme: providedTheme } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (colorScheme === 'dark'\n        ? DarkTheme\n        : DefaultTheme) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  const { children, settings } = props;\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}