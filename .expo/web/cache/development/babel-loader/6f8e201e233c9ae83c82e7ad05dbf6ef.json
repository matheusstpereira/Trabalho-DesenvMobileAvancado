{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\nimport { useTheme } from \"../../../core/theming\";\nvar LabelBackground = function LabelBackground(_ref) {\n  var parentState = _ref.parentState,\n    _ref$labelProps = _ref.labelProps,\n    placeholderStyle = _ref$labelProps.placeholderStyle,\n    baseLabelTranslateX = _ref$labelProps.baseLabelTranslateX,\n    topPosition = _ref$labelProps.topPosition,\n    hasActiveOutline = _ref$labelProps.hasActiveOutline,\n    label = _ref$labelProps.label,\n    backgroundColor = _ref$labelProps.backgroundColor,\n    labelStyle = _ref.labelStyle;\n  var hasFocus = hasActiveOutline || parentState.value;\n  var opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0]\n  });\n  var _useTheme = useTheme(),\n    roundness = _useTheme.roundness;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [-baseLabelTranslateX, 0]\n      })\n    }]\n  };\n  return label ? [React.createElement(Animated.View, {\n    key: \"labelBackground-view\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.view, {\n      backgroundColor: backgroundColor,\n      opacity: opacity,\n      bottom: Math.max(roundness, 2)\n    }, labelTranslationX]\n  }), React.createElement(AnimatedText, {\n    key: \"labelBackground-text\",\n    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {\n      top: topPosition + 1,\n      backgroundColor: backgroundColor,\n      opacity: opacity,\n      transform: [].concat(_toConsumableArray(labelStyle.transform), [{\n        scaleY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.2, 1]\n        })\n      }])\n    }],\n    numberOfLines: 1\n  }, label)] : null;\n};\nexport default LabelBackground;\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 8\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent'\n  }\n});","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAGA,OAAOC,YAAP;AACA,SAASC,QAAT;AAIA,IAAMC,eAAe,GAAG,SAAlBA,eAAe,OAWO;EAAA,IAV1BC,WADuB,QACvBA,WADuB;IAAA,uBAEvBC,UAAU;IACRC,gBADU,mBACVA,gBADU;IAEVC,mBAFU,mBAEVA,mBAFU;IAGVC,WAHU,mBAGVA,WAHU;IAIVC,gBAJU,mBAIVA,gBAJU;IAKVC,KALU,mBAKVA,KALU;IAMVC;IAEFC;EAEA,IAAMC,QAAQ,GAAGJ,gBAAgB,IAAIL,WAAW,CAACU,KAAjD;EACA,IAAMC,OAAO,GAAGX,WAAW,CAACY,OAAZ,CAAoBC,WAApB,CAAgC;IAC9CC,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADkC;IAE9CC,WAAW,EAAE,CAACN,QAAQ,GAAG,CAAH,GAAO,CAAhB,EAAmB,CAAnB;EAFiC,CAAhC,CAAhB;EAIA,gBAAsBX,QAAQ,EAA9B;IAAQkB;EAER,IAAMC,iBAAiB,GAAG;IACxBC,SAAS,EAAE,CACT;MACEC,UAAU,EAAEnB,WAAW,CAACY,OAAZ,CAAoBC,WAApB,CAAgC;QAC1CC,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD8B;QAE1CC,WAAW,EAAE,CAAC,CAACZ,mBAAF,EAAuB,CAAvB;MAF6B,CAAhC;IADd,CADS;EADa,CAA1B;EAWA,OAAOG,KAAK,GACR,CACEV,oBAACwB,QAAD,CAAUC,IAAV;IACEC,GAAG,EAAC,sBADN;IAEEC,aAAa,EAAC,MAFhB;IAGEC,KAAK,EAAE,CACLC,UAAU,CAACC,YADN,EAELC,MAAM,CAACC,IAFF,EAGL;MACErB,eADF,EACEA,eADF;MAEEI,OAFF,EAEEA,OAFF;MAGEkB,MAAM,EAAEC,IAAI,CAACC,GAAL,CAASf,SAAT,EAAoB,CAApB;IAHV,CAHK,EAQLC,iBARK;EAHT,EADF,EAeErB,oBAACC,YAAD;IACEyB,GAAG,EAAC,sBADN;IAEEE,KAAK,EAAE,CACLtB,gBADK,EAELM,UAFK,EAGLmB,MAAM,CAACK,aAHF,EAIL;MACEC,GAAG,EAAE7B,WAAW,GAAG,CADrB;MAEEG,eAFF,EAEEA,eAFF;MAGEI,OAHF,EAGEA,OAHF;MAIEO,SAAS,+BACJV,UAAU,CAACU,SADL,IAET;QACEgB,MAAM,EAAElC,WAAW,CAACY,OAAZ,CAAoBC,WAApB,CAAgC;UACtCC,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD0B;UAEtCC,WAAW,EAAE,CAAC,GAAD,EAAM,CAAN;QAFyB,CAAhC;MADV,CAFS;IAJb,CAJK,CAFT;IAqBEoB,aAAa,EAAE;EArBjB,GAuBG7B,KAvBH,CAfF,CADQ,GA0CR,IA1CJ;AA2CD,CAzED;AA2EA,eAAeP,eAAf;AAEA,IAAM4B,MAAM,GAAGF,UAAU,CAACW,MAAX,CAAkB;EAC/BR,IAAI,EAAE;IACJS,QAAQ,EAAE,UADN;IAEJJ,GAAG,EAAE,CAFD;IAGJK,IAAI,EAAE,EAHF;IAIJC,KAAK,EAAE;EAJH,CADyB;EAO/BP,aAAa,EAAE;IACbK,QAAQ,EAAE,UADG;IAEbC,IAAI,EAAE,EAFO;IAGbE,iBAAiB,EAAE,CAHN;IAIbC,KAAK,EAAE;EAJM;AAPgB,CAAlB,CAAf","names":["React","AnimatedText","useTheme","LabelBackground","parentState","labelProps","placeholderStyle","baseLabelTranslateX","topPosition","hasActiveOutline","label","backgroundColor","labelStyle","hasFocus","value","opacity","labeled","interpolate","inputRange","outputRange","roundness","labelTranslationX","transform","translateX","Animated","View","key","pointerEvents","style","StyleSheet","absoluteFill","styles","view","bottom","Math","max","outlinedLabel","top","scaleY","numberOfLines","create","position","left","width","paddingHorizontal","color"],"sources":["LabelBackground.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\n\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { useTheme } from '../../../core/theming';\n\nimport type { LabelBackgroundProps } from '../types';\n\nconst LabelBackground = ({\n  parentState,\n  labelProps: {\n    placeholderStyle,\n    baseLabelTranslateX,\n    topPosition,\n    hasActiveOutline,\n    label,\n    backgroundColor,\n  },\n  labelStyle,\n}: LabelBackgroundProps) => {\n  const hasFocus = hasActiveOutline || parentState.value;\n  const opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0],\n  });\n  const { roundness } = useTheme();\n\n  const labelTranslationX = {\n    transform: [\n      {\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-baseLabelTranslateX, 0],\n        }),\n      },\n    ],\n  };\n\n  return label\n    ? [\n        <Animated.View\n          key=\"labelBackground-view\"\n          pointerEvents=\"none\"\n          style={[\n            StyleSheet.absoluteFill,\n            styles.view,\n            {\n              backgroundColor,\n              opacity,\n              bottom: Math.max(roundness, 2),\n            },\n            labelTranslationX,\n          ]}\n        />,\n        <AnimatedText\n          key=\"labelBackground-text\"\n          style={[\n            placeholderStyle,\n            labelStyle,\n            styles.outlinedLabel,\n            {\n              top: topPosition + 1,\n              backgroundColor,\n              opacity,\n              transform: [\n                ...labelStyle.transform,\n                {\n                  scaleY: parentState.labeled.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0.2, 1],\n                  }),\n                },\n              ],\n            },\n          ]}\n          numberOfLines={1}\n        >\n          {label}\n        </AnimatedText>,\n      ]\n    : null;\n};\n\nexport default LabelBackground;\n\nconst styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 8,\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}